package com.ggp.games.RockPaperScissors;

import com.ggp.IAction;
import com.ggp.IInformationSet;
import com.ggp.IStrategy;

public class ExploitabilityEstimator {
    private CompleteInformationState initialState;

    public ExploitabilityEstimator(CompleteInformationState initialState) {
        this.initialState = initialState;
    }

    private double getProb(IStrategy unnormalizedStrategy, IAction a) {
        for (IInformationSet is: unnormalizedStrategy.getDefinedInformationSets()) {
            return unnormalizedStrategy.getProbability(is, a);
        }
        return 0;
    }

    private double getPayoff(IAction a, IAction b) {
        return initialState.next(a).next(b).getPayoff(1);
    }

    private double getActionExploitability(IAction action, IStrategy unnormalizedStrategy) {
        double actionExploitability = 0;
        for (IAction a: initialState.getLegalActions()) {
            actionExploitability += getPayoff(action, a) * getProb(unnormalizedStrategy, a);
        }
        return actionExploitability;
    }

    public double estimate(IStrategy unnormalizedStrategy) {
        double maxEploitability = 0;
        double stratTotal = 0;
        for (IInformationSet is: unnormalizedStrategy.getDefinedInformationSets()) {
            for (IAction a: is.getLegalActions()) {
                stratTotal += unnormalizedStrategy.getProbability(is, a);
            }
            break;
        }
        if (stratTotal == 0) return 0;

        for (IAction a: initialState.getLegalActions()) {
            double actionExploitability = getActionExploitability(a, unnormalizedStrategy);
            if (maxEploitability < actionExploitability) {
                maxEploitability = actionExploitability;
            }
        }

        return maxEploitability/stratTotal;
    }
}
